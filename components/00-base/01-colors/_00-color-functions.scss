/* Convert color values to desire format.
 * Returns hex.
 * Optionally returns rgb, rgba, hsla.
*/
@function cnvrt-clr($color, $format: null) {

  @if (type-of($color) == color) {

    @if ($format == null) {
      @return $color;
    }
    @else if ($format == 'rgb') {
      @return red($color), green($color), blue($color);
    }
    @else if ($format == 'rgba') {
      @return red($color), green($color), blue($color), opacity($color);
    }
    @else if ($format == 'hsl') {
      @return hue($color), saturation($color), lightness($color);
    }
    @else if ($format == 'hsla') {
      @return hue($color), saturation($color), lightness($color), opacity($color);
    }
    @else {
      @error "#{$format} is not a valid color format";
    }
  }
  @else {
    // @return $color;
    @error "#{$color} is not a valid color";
  }
}

// This color function makes it easy for you to call a color by it's functional
// name anywhere you need.
// E.g. to use the `text` color, you type: `color: clr(text);`
//
// How it works:
// This function works in conjunction with the dynamic css custom properties
// declarations below. The item called in the function is prefixed with
// `var(--c-` to call the custom property for that color.
// E.g. `color: clr(text);` will return `color: hsla(var(--c-text), 1);`
// Note: (The `--c-` is added via the `@each` loops below)
// This function also accepts an alpha number argument that will
// return the color value as hsl + alpha.
@function clr($name, $variant:null, $alpha: 1, $theme:default) {
  // Coverage: clr(text)
  @if ($variant == null) {
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      @return #{'hsla('}
        var(
          --c-#{$name},
          cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), 'hsl')
        ),
        $alpha
      #{')'};
    }
    @else {
      @return #{'hsla('}
          var(
            --c-#{$name},
            cnvrt-clr(map-get(map-get($color-palette, $theme), $name), 'hsl')
          ),
          $alpha
        #{')'};
    }
  }
  // Return variant as alpha value.
  // Coverage: clr(text, 0.5), clr(text, 0.5, contrast)
  @if ($variant != null and type-of($variant) == number) {
    @if (map-has-key($color-palette, $alpha)) {
      // Return color value if it doesn't have variations or assume
      // the base color from multi-dimensional array.
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$alpha},
              cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), 'hsl')
            ),
            $variant
          #{')'};
      }
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$alpha},
              cnvrt-clr(map-get(map-get($color-palette, $theme), $name), 'hsl')
            ),
            $variant
          #{')'};
      }
    }
    @else {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name},
              cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), 'hsl')
            ),
            $variant
          #{')'};
      }
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name},
              cnvrt-clr(map-get(map-get($color-palette, $theme), $name), 'hsl')
            ),
            $variant
          #{')'};
      }
    }
  }
  // Coverage: clr(text, inverse),
  // clr(text, inverse, 0.5), clr(text, contrast), clr(text, contrast, 0.5),
  // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
  @if ($variant != null and type-of($variant) == string) {
    // Return theme specific color if it's defined.
    // Coverage: clr(text, contrast), clr(text, contrast, 0.5)
    @if (map-has-key($color-palette, $variant)) {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant},
              cnvrt-clr(map-get(map-get(map-get($color-palette, $variant), $name), 'base'), 'hsl')
            ),
            $alpha
          #{')'};
      }
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant},
              cnvrt-clr(map-get(map-get($color-palette, $variant), $name), 'hsl')
            ),
            $alpha
          #{')'};
      }
    }
    // Coverage: clr(text, inverse), clr(text, inverse, 0.5),
    // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      // Coverage: clr(text, inverse),
      // clr(text, inverse, 0.5), clr(text, contrast, 0.5),
      // clr(text, inverse, 0.5, contrast)
      @if (type-of($alpha) == number) {
        @if (map-has-key($color-palette, $variant) and type-of(map-get(map-get($color-palette, $variant), $name)) == map) {

          @return #{'hsla('}
              var(
                --c-#{$name}-#{$variant},
                cnvrt-clr(map-get(map-get(map-get($color-palette, $variant), $name), 'base'), 'hsl')
              ),
              $alpha
            #{')'};
        }
        @else {
          @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
            @return #{'hsla('}
                var(
                  --c-#{$name}-#{$variant},
                  cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), 'hsl')
                ),
                $alpha
              #{')'};
          }
          @else {
            @return #{'hsla('}
                var(
                  --c-#{$name}-#{$variant},
                  cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), $variant), 'hsl')
                ),
                $alpha
              #{')'};
          }
        }
      }
      // Coverage: clr(text, inverse, contrast)
      @else if (map-has-key($color-palette, $alpha)) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant}-#{$alpha},
              cnvrt-clr(map-get(map-get(map-get($color-palette, $alpha), $name), $variant), 'hsl')
            ),
            1
          #{')'};
      }
      @else {
        @error "Property #{$alpha} must be either an alpha number or theme name.";
      }
    }
    @else {
      @return #{'hsla('}
          var(
            --c-#{$name}-#{$variant},
            cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), $variant), 'hsl')
          ),
          $alpha
        #{')'};
    }
  }
}
